@page "/deckedit"
@page "/deckedit/{DeckId}"

@using CodeLouCapstone.Shared

@if (!Saved)
{
    <section class="deck-edit">
        <h1 class="page-title">@Deck.DeckName</h1>
        <EditForm Model="@Deck" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit" FormName="DeckEdit">
            <ValidationSummary></ValidationSummary>

            <div class="form-group row">
                <label for="deckname" class="col-sm-3">Deck Name: </label>
                <InputText id="deckname" class="form-control col-sm-8" @bind-Value="@Deck.DeckName" placeholder="Enter deck name"></InputText>
                <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => Deck.DeckName)" />
            </div>

            @if (Deck.DeckId != 0)
            {
                <ul>
                    @foreach (string card in Deck.Cards)
                    {
                        <li>
                           @*<input type="text" @bind="card" @bind:event="oninput" />*@
                           <li>@card</li>
                            <button @onclick="() => RemoveCard(card)">Remove Card</button>
                        </li>
                    }
                </ul>
                
            }
           
            @*I need to fix this.*@
            @*<EditForm Model="@newCard" OnValidSubmit="@HandleValidCardSubmit" OnInvalidSubmit="@HandleInvalidCardSubmit" FormName="CardAdd" Context="cardAdd">*@
            <div>
                <input type="text" @bind="newCard" placeholder="Enter New Card" />
                <button @onclick="AddCard">Add Card</button>
            </div>
            @*</EditForm>*@

            <button type="submit" class="btn btn-primary edit-btn">Save Deck</button>

            @if (Deck.DeckId > 0)
            {
                <a class="btn btn-danger" @onclick="@DeleteDeck">Delete Deck</a>
            }


        </EditForm>
    </section>
}
else
{
    <div class="alert @StatusClass">@Message</div>
}

@*
@page "/item-editor"

@using System.ComponentModel.DataAnnotations

<EditForm Model="itemModel" OnValidSubmit="SaveItem">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Fields for the main item -->
    <div>
        <label>Name:</label>
        <InputText @bind-Value="itemModel.Name" />
    </div>

    <div>
        <h3>SubItems</h3>
        <ul>
            @foreach (var subItem in itemModel.SubItems)
            {
                <li>
                    <InputText @bind-Value="subItem.Name" placeholder="SubItem Name" />
                    <InputNumber @bind-Value="subItem.Value" placeholder="Value" />
                    <button type="button" @onclick="() => RemoveSubItem(subItem)">Remove</button>
                </li>
            }
        </ul>

        <button type="button" @onclick="AddSubItem">Add SubItem</button>
    </div>

    <!-- Submit button for saving the item -->
    <button type="submit">Save Item</button>
</EditForm>

@code {
    private ItemModel itemModel = new ItemModel();

    private void AddSubItem()
    {
        // Add a new SubItem to the list
        itemModel.SubItems.Add(new SubItem());
    }

    private void RemoveSubItem(SubItem subItem)
    {
        // Remove the selected SubItem from the list
        itemModel.SubItems.Remove(subItem);
    }

    private void SaveItem()
    {
        // Handle saving the entire item
        Console.WriteLine($"Saving Item: {itemModel.Name}");
        foreach (var subItem in itemModel.SubItems)
        {
            Console.WriteLine($"SubItem: {subItem.Name}, {subItem.Value}");
        }
        // You can add logic here to persist the item (e.g., to a database)
    }
}

*@
